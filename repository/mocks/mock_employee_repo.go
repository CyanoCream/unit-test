// Code generated by MockGen. DO NOT EDIT.
// Source: sesi_8/repository (interfaces: EmployeeRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	model "sesi_8/model"
)

// MockEmployeeRepo is a mock of EmployeeRepo interface
type MockEmployeeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepoMockRecorder
}

// MockEmployeeRepoMockRecorder is the mock recorder for MockEmployeeRepo
type MockEmployeeRepoMockRecorder struct {
	mock *MockEmployeeRepo
}

// NewMockEmployeeRepo creates a new mock instance
func NewMockEmployeeRepo(ctrl *gomock.Controller) *MockEmployeeRepo {
	mock := &MockEmployeeRepo{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmployeeRepo) EXPECT() *MockEmployeeRepoMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method
func (m *MockEmployeeRepo) CreateEmployee(arg0 model.Employee) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", arg0)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee
func (mr *MockEmployeeRepoMockRecorder) CreateEmployee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockEmployeeRepo)(nil).CreateEmployee), arg0)
}

// DeleteEmployee mocks base method
func (m *MockEmployeeRepo) DeleteEmployee(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployee indicates an expected call of DeleteEmployee
func (mr *MockEmployeeRepoMockRecorder) DeleteEmployee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockEmployeeRepo)(nil).DeleteEmployee), arg0)
}

// GetEmployeeByID mocks base method
func (m *MockEmployeeRepo) GetEmployeeByID(arg0 int64) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByID", arg0)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByID indicates an expected call of GetEmployeeByID
func (mr *MockEmployeeRepoMockRecorder) GetEmployeeByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByID", reflect.TypeOf((*MockEmployeeRepo)(nil).GetEmployeeByID), arg0)
}

// UpdateEmployee mocks base method
func (m *MockEmployeeRepo) UpdateEmployee(arg0 model.Employee) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", arg0)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployee indicates an expected call of UpdateEmployee
func (mr *MockEmployeeRepoMockRecorder) UpdateEmployee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockEmployeeRepo)(nil).UpdateEmployee), arg0)
}
